#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/p2sm.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <behaviors/p2sm_behaviors.dtsi>
#include <behaviors/rate_limit.dtsi>
#include <behaviors/auto_hold.dtsi>

#define LAYER_DEFAULT 0
#define LAYER_EXTRAS 1
#define LAYER_DEVICE 2
#define LAYER_SCROLL 3
#define LAYER_SNIPE 4
#define LAYER_USER 5

#define SCROLL_MULTIPLIER 1
#define SCROLL_DIVISOR 3

#define SNIPE_MULTIPLIER 1
#define SNIPE_DIVISOR 4

/ {
	keymap {
		compatible = "zmk,keymap";

		default_layer {
			display-name = "Default";
			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(TAB) LC(LS(TAB))>;
			bindings = <
				&ltmkp LAYER_SNIPE ENTER  &ltmkp LAYER_SCROLL ESC
				&mkp MCLK                 &mkp RCLK
				&mkp LCLK                 &mkp RCLK
				&ltm LAYER_EXTRAS MB4     &ltm LAYER_DEVICE MB5
			>;
		};

		layer2 {
			display-name = "Extras";
			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(TAB) LC(LS(TAB))>;
			bindings = <
				&kp LC(C)   &kp LC(V)
				&kp LC(X)   &kp LC(Z)
				&kp LC(Z)   &kp LC(C)
				&trans      &kp LC(V)
			>;
		};

		layer3 {
			display-name = "Device";
			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(TAB) LC(LS(TAB))>;
			bindings = <
				&rgb_off           &rgb_ug RGB_EFF
				&bt BT_CLR         &bt BT_NXT
				&rgb_tog           &bt BT_PRV
				&studio_unlock     &trans
			>;
		};

		layer4 {
			display-name = "Scroll";
			sensor-bindings = <&rotenc_sens P2SM_DEC P2SM_INC &rotenc_scrlsens P2SM_INC P2SM_DEC>;
			bindings = <
			    &trans              &trans
			    &trans              &scrlsens P2SM_INC 1
			    &rrl 1              &scrlsens P2SM_DEC 1
			    &sens P2SM_DEC 1    &sens P2SM_INC 1
			>;
		};

		layer5 {
			display-name = "Snipe";
			sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp RIGHT LEFT>;
			bindings = <
				&trans           &soft_off
				&trans           &trans
				&trans           &trans
				&trans           &trans
			>;
		};

		layer6 {
			display-name = "User";
			sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(TAB) LC(LS(TAB))>;
			bindings = <
				&trans        &trans
				&trans        &trans
				&trans        &trans
				&trans        &trans
		    >;
		};
	};

	trackball {
		scroll {
			layers = <LAYER_SCROLL>;
			input-processors = <&zip_xy_scaler SCROLL_MULTIPLIER SCROLL_DIVISOR>, <&zip_axis_clamper>,
							   <&zip_xy_to_scroll_mapper>, <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
		};

		snipe {
			layers = <LAYER_SNIPE>;
			input-processors = <&zip_xy_scaler SNIPE_MULTIPLIER SNIPE_DIVISOR>;
		};
	};

	macros {
		rgb_tog: rgb_tog {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <20>;
			bindings
			= <&rgb_ug RGB_TOG>
			, <&ext_power EP_TOG>
			;
		};

		rgb_off: rgb_off {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <20>;
			bindings
			= <&ext_power EP_OFF>
			, <&rgb_ug RGB_OFF>
			;
		};
	};

	behaviors {
		rrl {
			values-ms = <8 6 4 2>;
			feedback-duration = <65>;
		};

		ltm: layer-tap-momentary {
			compatible = "zmk,behavior-hold-tap";
			display-name = "Hold/tap (layer/mouse key)";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <250>;
			hold-while-undecided;
			bindings = <&mo>, <&mkp>;
		};

		ltmkp: layer-tap-momentary-key-press {
			compatible = "zmk,behavior-hold-tap";
			display-name = "Hold/tap (layer/keyboard key)";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <250>;
			hold-while-undecided;
			bindings = <&mo>, <&kp>;
		};

		sens: p2sm_sensitivity {
			feedback-duration = <65>;
			step = <50>;
			max-step = <8>;
		};

		scrlsens: p2sm_scroll_sensitivity {
			feedback-duration = <65>;
			step = <10>;
			min-step = <2>;
			max-step = <12>;
		};

		scrlsenstog: p2sm_sens_toggle {
			display-name = "Scroll sensitivity (toggle 3%/6%)";
			feedback-duration = <65>;
			step = <30>;
			min-step = <1>;
			max-step = <2>;
			scroll;
		};

		sens_nowrap: sens_nowrap {
			compatible = "zmk,behavior-p2sm-sens";
			#binding-cells = <2>;
			feedback-duration = <65>;
			feedback-gpios = <&gpio0 24 GPIO_ACTIVE_HIGH>;
			feedback-extra-gpios = <&gpio1 0 GPIO_ACTIVE_HIGH>;
			step = <50>;
			min-step = <1>;
			max-step = <8>;
		};

		scrlsens_nowrap: scrlsens_nowrap {
			compatible = "zmk,behavior-p2sm-sens";
			#binding-cells = <2>;
			feedback-duration = <65>;
			feedback-gpios = <&gpio0 24 GPIO_ACTIVE_HIGH>;
			feedback-extra-gpios = <&gpio1 0 GPIO_ACTIVE_HIGH>;
			step = <10>;
			min-step = <2>;
			max-step = <12>;
			scroll;
		};

		rotenc_sens: rotenc_sens {
			compatible = "zmk,behavior-sensor-rotate-var";
			#sensor-binding-cells = <2>;
			bindings = <&sens_nowrap>, <&sens_nowrap>;
		};

		rotenc_scrlsens: rotenc_scrlsens {
			compatible = "zmk,behavior-sensor-rotate-var";
			#sensor-binding-cells = <2>;
			bindings = <&scrlsens_nowrap>, <&scrlsens_nowrap>;
		};
	};
};
